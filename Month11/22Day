cAP이론 이란?
partition Tolerance를 중심으로

분산 데이터 베이스 시스템 : 여러 대의 노드에 데이터를 저장

데이터 데이터베이스를 구성하는 특정 노드에 써지며 

사용자는어느 노드에 저장되있는지 알 수 없다

데이터 조회를 요청 받으면 인접한 노드를 탐색해 결과를 반환

하나의 데이터 베이스처럼 움직인다

(파티션 1개의 하드 여러개의 논리적 구역 ex) c드라이브 d드라이브)

분산은 여러개의 노드 1개의 데이터 베이스

장점 : 데이터 베이스 환경에 노드를 더함으로써 쉽게 수평 확장 가능

![img1.daumcdn.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/aaf3cdae-a284-4833-951b-d3c37794ce4c/1319dee7-4ab4-4941-8c32-a053c980c0c7/img1.daumcdn.png)

가용성 :  언제든지 정보 접근 가능

어느 노드에 접근해도 같은 데이터를 조회한다

모든 요청이 응답을 받을 수 있어야 한다

시스템이 중단되지 않고 언제든지 사용가능해야 한다

일관성 : 같은 정보를 공유

조회하는 데이터는 가장 최근의 데이터

분할 허용성 : partition tolerance

분할 : 노드 간 통신이 끊어지는 것

시스템 내 분할이 생겨도 여전히 작동 하는 것

한 노드가 다른 노드와 통신이 어려울 때

다른 복제 노드가 응답할 수 있어야 한다

필수적이야한다

CAP 이론 :

분산 시스템이 분할이 생겼다면 일관성과 가용성 둘 중 하나를 희생해야한다

![img1.daumcdn.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/aaf3cdae-a284-4833-951b-d3c37794ce4c/1790c2ce-7175-402e-90e0-e360a9ad6736/img1.daumcdn.png)

가용성을 포기한 경우 : CP 

예시 MongoDB

데이터를 하나 혹은 여러 개의 프라이머리 노드에 json 형태로 저장

각 프라이머리 노드는 로그를 통해 비동기적으로 업데이트 되는 복제본을 가진 여러개의 세컨더리 노드를 가진다(비동기적으로 업데이트 되는 복제본 보유)

통신 응답을 받지 못하면 프라이머리 노드는 접근 불가 상태 시키고 

가지고 있는 세컨더리 중 하나를 프라이머리로 승격 

이 상황 중 시스템은 모든 쓰기 작업은 사용 불가능하게 된다

![img1.daumcdn.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/aaf3cdae-a284-4833-951b-d3c37794ce4c/0f04ed45-f70c-49d0-8836-550f1948de12/img1.daumcdn.png)

AP :

예시 Cassandra

분산 데이터 베이스 시스템 

Peer to peer 시스템 : 프라이머리 노드 없이 읽기와 쓰기 작업 가능

복제본을 다른 노드에 저장

모든 노드가 같은 작업을 수행함

지정된 수만큼 시계 방향으로 데이터를 저장

한 노드 간의 통신이 깨져도 데이터의 읽기와 쓰기 작업이 가능

데이터가 다른 노드와 맞지 않는 상태 → 일관성이 깨진 상태

카산드라는 최종적으로 일관성을 복구한다(Eventual Consistency)

추후에 복구함

따라서 동기화 전에는 각 노드는 서로 다른 버전의 데이터를 가짐

각 비율을 적절히 유지하는게 좋다고 한다

https://onduway.tistory.com/106
